// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  Administrator
  Member
  GroupAdmin
}

model Role {
  id   String    @id @default(uuid())
  name RoleName  
  users User[]
  groupMembers GroupMember[]
}

model User {
  id           String       @id @default(uuid())
  username     String
  email        String       @unique
  passwordHash String
  city         String?      // nullable
  department   String?      // nullable
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  roleId       String       // Added this field to reference the role
  role         Role         @relation(fields: [roleId], references: [id])  // Added this relation
  spots        Spot[]
  groupMembers GroupMember[]
  catches      Catch[]
  chats        Chat[]
}

model Spot {
  id          String   @id @default(uuid())
  userId      String
  groupId     String?
  name        String
  description String
  latitude    Float   
  longitude   Float  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])
}

model Group {
  id           String         @id @default(uuid())
  name         String
  description  String
  isPublic     Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  spots        Spot[]
  groupMembers GroupMember[]
  events       Event[]
  chats        Chat[]
}

model GroupMember {
  groupId String
  userId  String
  roleId  String   // this now refers to the role within the group
  joinedAt DateTime @default(now())
  group   Group     @relation(fields: [groupId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  role    Role      @relation(fields: [roleId], references: [id])  // this relation is still here
  @@id([groupId, userId])
}

model Event {
  id         String   @id @default(uuid())
  groupId    String
  name       String
  description String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  group      Group    @relation(fields: [groupId], references: [id])
  catches    Catch[]
}

model Catch {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  name      String
  weight    Float
  date      DateTime
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model Chat {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  message   String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}